import streamlit as st
import pandas as pd
import os
from llama_cpp import Llama
from tqdm import tqdm
import llama_cpp.llama as raw_llama
from datetime import datetime

# ==============================
# –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∏ –≥–ª–∞–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
# P.S. –∫–æ–Ω—Ñ–∏–≥ –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Ç.–∫. –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ª–æ–∫ –Ω–∞ 200–º–±
# ==============================
st.set_page_config(page_title="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM-–º–æ–¥–µ–ª–µ–π", layout="wide")
st.title("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM-–º–æ–¥–µ–ª–µ–π –Ω–∞ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏")

# ==============================
# –ë–ª–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å
# ==============================
def load_model_list():
    models_dir = os.path.join(os.getcwd(), "Models")
    return [f for f in os.listdir(models_dir) if f.endswith(".gguf")]

def load_llama_model(path):
    return Llama(
        model_path=path,
        n_ctx=4096, #–∏–∑-–∑–∞ –≤–µ–ª–∏—á–∏–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ –ø—Ä–∏—à–ª–æ—Å—å —Å–∏–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —ç—Ç—É –≤–µ–ª–∏—á–∏–Ω—É
        n_gpu_layers=-1,
        n_threads=4,
        low_vram=True #—á—Ç–æ–±—ã –Ω–µ –ø–æ–≥–∏–±–∞–ª –∫–æ–º–ø
    )

def evaluate_model(model, df, system_prompt="", judge_model=None):
    answers = []
    correct_answers, wrong_answers, instruction_violations = 0, 0, 0

    for _, row in tqdm(df.iterrows(), total=len(df)):
        question = row["prompt"]
        expected_answer = row["answer"]

        prompt = f"""–í–æ–ø—Ä–æ—Å: {question}
        –û—Ç–≤–µ—Ç:"""

        response = model.create_chat_completion(
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            max_tokens=10,
            temperature=0.1,
        )
        generated_answer = response["choices"][0]["message"]["content"].strip()
        answers.append(generated_answer)


        if judge_model is not None:
            # üí¨ –û—Ü–µ–Ω–∫–∞ 1: –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ —Å–º—ã—Å–ª—É
            judge_prompt_1 = f"""–¢—ã ‚Äî —Å—É–¥—å—è, –æ—Ü–µ–Ω–∏–≤–∞—é—â–∏–π –æ—Ç–≤–µ—Ç –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª–∏. –£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ –æ–Ω–∞ –≤–∏–¥–µ–ª–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç.
            –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç: {system_prompt}
            –í–æ–ø—Ä–æ—Å: {question}
            –û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç: {expected_answer}
            –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {generated_answer}
            –í–æ–ø—Ä–æ—Å: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ —Å–º—ã—Å–ª—É, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –¥–æ—Å–ª–æ–≤–Ω–æ? –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –î–∞ –∏–ª–∏ –ù–µ—Ç."""

            judge_response_1 = judge_model.create_chat_completion(
                messages=[{"role": "user", "content": judge_prompt_1}],
                max_tokens=2,
                temperature=0.0,
            )
            judge_decision_1 = judge_response_1["choices"][0]["message"]["content"].strip().lower()

            # if judge_decision_1 not in {"–¥–∞", "–Ω–µ—Ç"}: –¢.–ö. –º–æ–¥–µ–ª–∏ —Å–ª–∞–±—ã–µ, –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–¥–µ—Ç—Å—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—Å–µ
            #     unclear_cases.append({
            #         "question": question,
            #         "expected": expected_answer,
            #         "answer": generated_answer,
            #         "judge_raw": judge_decision_1
            #     })

            if '–¥–∞' in judge_decision_1:
                correct_answers += 1
            else:
                wrong_answers += 1

            # üí¨ –û—Ü–µ–Ω–∫–∞ 2: —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            judge_prompt_2 = f"""–¢—ã ‚Äî —Å—É–¥—å—è, –æ—Ü–µ–Ω–∏–≤–∞—é—â–∏–π, –≤—ã–ø–æ–ª–Ω–∏–ª–∞ –ª–∏ –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞.
            –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç: {system_prompt}
            –í–æ–ø—Ä–æ—Å: {question}
            –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {generated_answer}
            –í–æ–ø—Ä–æ—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∑–∞–¥–∞–Ω–Ω–∞—è –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ–º—Ç–µ? –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –î–∞ –∏–ª–∏ –ù–µ—Ç."""

            judge_response_2 = judge_model.create_chat_completion(
                messages=[{"role": "user", "content": judge_prompt_2}],
                max_tokens=2,
                temperature=0.0,
            )
            judge_decision_2 = judge_response_2["choices"][0]["message"]["content"].strip().lower()

            if '–¥–∞' in judge_decision_2:
                instruction_violations += 1

        else:
            # fallback: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é
            if str(generated_answer).lower() in str(expected_answer).lower():
                correct_answers += 1
            else:
                wrong_answers += 1
                
        if judge_model is not None:
            st.markdown(f"**üßë‚Äç‚öñÔ∏è –°—É–¥—å—è (—Å–º—ã—Å–ª):** `{judge_decision_1}`")
            st.markdown(f"**üìè –°—É–¥—å—è (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è):** `{judge_decision_2}`")    
            st.markdown("---")
            st.markdown(f"### üß™ –ü—Ä–∏–º–µ—Ä {len(answers)}")
            st.markdown(f"**üü¢ –í–æ–ø—Ä–æ—Å:** {question}")
            st.markdown(f"**üì• –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:** `{system_prompt}`")
            st.markdown(f"**ü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:** `{generated_answer}`")
            st.markdown(f"**üéØ –≠—Ç–∞–ª–æ–Ω:** `{expected_answer}`")
        instruction_violations = 0
           
    return answers, correct_answers, wrong_answers, instruction_violations

# ==============================
# –¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ==============================

st.header("üß™ –¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π")

st.write("–ö–∞—Å—Ç–æ–º–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, " \
"–∫–∞–∫ —ç—Ç–æ —É–∫–∞–∑–∞–Ω–æ —É –Ω–∞—Å –≤ —à–∞–±–ª–æ–Ω–µ –Ω–∏–∂–µ. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. " \
"–î–∞–∂–µ –µ—Å–ª–∏ –≤—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏, " \
"–∏–Ω–∞—á–µ –º–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–∞—à —Ñ–∞–π–ª.")

sample_path = os.path.join("Sample", "SampleDataset.xlsx") #–¥–µ–ª–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–∑–µ—Ü —Ç–æ–≥–æ, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç

with open(sample_path, "rb") as f:
    sample_bytes = f.read()

st.download_button( #—Å–¥–µ–ª–∞–µ–º —Å–∞–º—É –∫–Ω–æ–ø–∫—É
    label="üì• –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞",
    data=sample_bytes,
    file_name="SampleDataset.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

model_names = load_model_list()
selected_model_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞:", model_names, key="custom_model")

user_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª (–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ | –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç | –ü—Ä–æ–º–ø—Ç | –û—Ç–≤–µ—Ç)", type="xlsx")
if user_file and st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ—Å—Ç"):
    df_all = pd.read_excel(user_file)

    expected_columns = {"–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞", "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", "–ü—Ä–æ–º–ø—Ç", "–û—Ç–≤–µ—Ç"}
    if not expected_columns.issubset(df_all.columns):
        st.error(f"‚ùå –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {expected_columns}")
        st.stop()

    model_path = os.path.join("Models", selected_model_name)
    model = load_llama_model(model_path)

    judge_model_dir = os.path.join("Models", "JudgeModel")
    judge_files = [f for f in os.listdir(judge_model_dir) if f.endswith(".gguf")]
    if not judge_files:
        st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å-—Å—É–¥—å—è –≤ 'Models/JudgeModel'")
        st.stop()
    judge_model = load_llama_model(os.path.join(judge_model_dir, judge_files[0]))

    metric_results = {}
    violation_total = 0
    total_rows = 0

    for halluc_type in ["–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π", "–§–∞–∫—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π", "–õ–æ–≥–∏—á–µ—Å–∫–∏–π"]:
        df_type = df_all[df_all["–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞"].str.lower() == halluc_type.lower()]
        if df_type.empty:
            continue

        df_eval = pd.DataFrame({
            "prompt": df_type["–ü—Ä–æ–º–ø—Ç"].astype(str),
            "answer": df_type["–û—Ç–≤–µ—Ç"].astype(str)
        })
        system_prompt = df_type["–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"].iloc[0] if pd.notna(df_type["–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"].iloc[0]) else ""

        answers, correct, wrong, violations = evaluate_model(
            model=model,
            df=df_eval,
            system_prompt=system_prompt,
            judge_model=judge_model
        )

        #–æ—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç 0 –¥–æ 100%
        total = correct + wrong
        score = round(correct / total * 100, 2) if total else 0
        metric_results[halluc_type] = f"{score}%"

        violation_total += violations
        total_rows += len(df_eval)

    instruction_score = round((1 - violation_total / total_rows) * 100, 2) if total_rows else "N/A"
    metric_results["–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º"] = f"{instruction_score}%"

    result_df = pd.DataFrame([{
        "–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏": selected_model_name,
        "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ": metric_results.get("–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π", "N/A"),
        "–§–∞–∫—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ": metric_results.get("–§–∞–∫—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π", "N/A"),
        "–õ–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ": metric_results.get("–õ–æ–≥–∏—á–µ—Å–∫–∏–π", "N/A"),
        "–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º": metric_results.get("–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º", "N/A"),
        "–ù–∞–∑–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞": user_file.name,
        "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞": datetime.now().strftime("%d.%m.%Y %H:%M")
    }])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ custom_leaderboard.xlsx
    custom_leaderboard_path = os.path.join("leaderboard", "custom_leaderboard.xlsx")
    os.makedirs("leaderboard", exist_ok=True)
    if os.path.exists(custom_leaderboard_path):
        existing_custom = pd.read_excel(custom_leaderboard_path)
    else:
        existing_custom = pd.DataFrame()
    updated_custom_df = pd.concat([existing_custom, result_df], ignore_index=True)
    updated_custom_df.to_excel(custom_leaderboard_path, index=False)

    st.success("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ custom_leaderboard.xlsx")
    st.dataframe(result_df, use_container_width=True)

# ==============================
# üìà –õ–∏–¥–µ—Ä–±–æ—Ä–¥—ã –º–æ–¥–µ–ª–µ–π
# ==============================

st.header("üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥: –∫–∞—Å—Ç–æ–º–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã")
try:
    custom_leaderboard_df = pd.read_excel(os.path.join("leaderboard", "custom_leaderboard.xlsx"))
    sort_custom = st.selectbox("üîΩÔ∏è –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ (–∫–∞—Å—Ç–æ–º–Ω—ã–µ):", options=custom_leaderboard_df.columns[1:])
    sorted_custom_df = custom_leaderboard_df.sort_values(by=sort_custom, ascending=False, ignore_index=True)
    st.dataframe(sorted_custom_df, use_container_width=True)
except Exception as e:
    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å custom_leaderboard.xlsx: {e}")

# ==============================
# ‚úÖ –ë–ª–æ–∫ 2 ‚Äî –¢–µ—Å—Ç –Ω–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö
# ==============================

st.header("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö")
selected_model_name2 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏:", model_names, key="model2")

dataset_map = {
    "ContextDataset.xlsx": "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ",
    "FactsDataset.xlsx": "–§–∞–∫—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ",
    "LogicDataset.xlsx": "–õ–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"
}

selected_datasets = st.multiselect(
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
    options=list(dataset_map.keys()),
    default=list(dataset_map.keys())
)

if st.button("üî¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É –º–æ–¥–µ–ª–∏ –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞"):
    datasets_dir = os.path.join(os.getcwd(), "Datasets")

    model_path = os.path.join("Models", selected_model_name2)
    model = load_llama_model(model_path)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏-—Å—É–¥—å–∏
    judge_model_dir = os.path.join("Models", "JudgeModel")
    judge_files = [f for f in os.listdir(judge_model_dir) if f.endswith(".gguf")]
    if not judge_files:
        st.error("‚ùå –í –ø–∞–ø–∫–µ 'Models/JudgeModel' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–∏-—Å—É–¥—å–∏ (.gguf)")
        st.stop()
    judge_model_path = os.path.join(judge_model_dir, judge_files[0])
    judge_model = load_llama_model(judge_model_path)

    results = {}
    instruction_violations_total = 0
    instruction_rows_total = 0

    for filename, label in dataset_map.items():
        if filename not in selected_datasets:
            results[label] = "N/A"
            continue

        file_path = os.path.join(datasets_dir, filename)

        try:
            full_df = pd.read_excel(file_path, header=None)
            system_prompt = str(full_df.iloc[0, 0]) if pd.notna(full_df.iloc[0, 0]) else ""
            df = pd.read_excel(file_path, header=1)

            df["prompt"] = df["prompt"].astype(str)
            df["answer"] = df["answer"].astype(str)

            answers, correct, wrong, violations = evaluate_model(
                model=model,
                df=df,
                system_prompt=system_prompt,
                judge_model=judge_model
            )

            total = correct + wrong
            score = round(correct / total * 100, 2) if total else 0
            results[label] = f"{score}%"

            instruction_violations_total += violations
            instruction_rows_total += len(df)

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ '{filename}': {e}")
            results[label] = "N/A"

    # –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–π –º–µ—Ç—Ä–∏–∫–∏ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
    if instruction_rows_total > 0:
        instruction_score = round((1 - instruction_violations_total / instruction_rows_total) * 100, 2)
        results["–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º"] = f"{instruction_score}%"
    else:
        results["–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º"] = "N/A"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ leaderboard
    if results:
        leaderboard_path = os.path.join("leaderboard", "leaderboard.xlsx")
        os.makedirs("leaderboard", exist_ok=True)
        if os.path.exists(leaderboard_path):
            existing_df = pd.read_excel(leaderboard_path)
        else:
            existing_df = pd.DataFrame()

        new_row = {
            "–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏": selected_model_name2,
            "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ": results.get("–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", "N/A"),
            "–§–∞–∫—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ": results.get("–§–∞–∫—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", "N/A"),
            "–õ–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ": results.get("–õ–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", "N/A"),
            "–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º": results.get("–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º", "N/A"),
            "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞": datetime.now().strftime("%d.%m.%Y %H:%M")
        }

        updated_df = pd.concat([existing_df, pd.DataFrame([new_row])], ignore_index=True)
        updated_df.to_excel(leaderboard_path, index=False)

        st.success("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ leaderboard.xlsx")
        st.dataframe(updated_df)


# ================================================ #
# –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ –∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ #
# ================================================ #

st.header("üìä –õ–∏–¥–µ—Ä–±–æ—Ä–¥: –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã")
try:
    leaderboard_df = pd.read_excel(os.path.join("leaderboard", "leaderboard.xlsx"))
    sort_option = st.selectbox("üîΩÔ∏è –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ (–ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ):", options=leaderboard_df.columns[1:])
    sorted_df = leaderboard_df.sort_values(by=sort_option, ascending=False, ignore_index=True)
    st.dataframe(sorted_df, use_container_width=True)
except Exception as e:
    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å leaderboard.xlsx: {e}")

# ==============================
# üóÇ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–æ–¥–µ–ª–∏
# ==============================
# st.header("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–æ–¥–µ–ª–∏")
# uploaded_model = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à—É LLM –º–æ–¥–µ–ª—å (.gguf)", type=["gguf"], key="custom")
# if uploaded_model:
#     model_folder = os.path.join(os.getcwd(), "Models")
#     os.makedirs(model_folder, exist_ok=True)
#     model_path = os.path.join(model_folder, uploaded_model.name)
#     with open(model_path, "wb") as f:
#         f.write(uploaded_model.getbuffer())
#     st.success(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {model_path}")
